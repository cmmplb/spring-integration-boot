<?xml version="1.0" encoding="UTF-8"?>

<!-- scan-logback配置文件一旦发生变化，logback支持重新加载文件，这是基于logback框架中一个后台线程实现的。默认情况下，logback一分钟加载一次 -->
<!-- debug-当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- application-dev.yml 传递参数，不能使用logback 自带的<property>标签 -->
    <springProperty scope="context" name="spring.application.name" source="spring.application.name"
                    defaultValue="springboot"/>
    <springProperty scope="context" name="logging.dir" source="logging.file.path" defaultValue="D:/Logs"/>
    <springProperty scope="context" name="logging.level" source="logging.level.root" defaultValue="info"/>

    <!-- 日志存放路径 -->
    <property name="log.path" value="${logging.dir}/${spring.application.name}"/>
    <!-- 日志输出格式 -->
    <property name="log.pattern" value="%date [%thread] %-5level [%logger{50}] %file:%line - %msg%n"/>
    <!-- 编码格式设置 -->
    <property name="ENCODING" value="UTF-8"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
    </appender>

    <!-- 系统info日志输出 -->
    <appender name="info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/info.log</file>
        <!-- 循环政策：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${log.path}/%d{yyyy-MM, aux}/info.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <!-- 日志最大的历史 30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>INFO</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 系统debug日志输出 -->
    <appender name="debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${log.path}/%d{yyyy-MM, aux}/debug.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <!-- 日志最大的历史 30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>DEBUG</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 系统error日志输出 -->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${log.path}/%d{yyyy-MM}/error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <!-- 日志最大的历史 30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <!-- 使用private static final Logger log = LoggerFactory.getLogger("USER_LOGIN"); -->
    <!-- ==========================用户登录日志设置========================== -->
    <appender name="USER_LOGIN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/user-login.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${log.path}/%d{yyyy-MM}/user-login.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <!-- 日志最大的历史 30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
    </appender>

    <!-- ============================================================================= -->
    <appender name="logstash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <param name="Encoding" value="UTF-8"/>
        <destination>127.0.0.1:5044</destination>
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder" >
            <customFields>{"appname":"jacob"}</customFields>
        </encoder>
    </appender>

    <!-- ===日志输出级别，OFF level > FATAL > ERROR > WARN > INFO > DEBUG > ALL level=== -->

    <!-- 如果整合了nacos-配置心跳 INFO屏蔽 -->
    <logger name="com.alibaba.nacos" level="ERROR">
        <appender-ref ref="error"/>
    </logger>
    <!-- Ignore the empty nacos configuration and get it based on dataId[] & group[] -->
    <logger name="com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder" level="ERROR"/>
    <!--
        ERROR [ModelSpecification.spec] At least one type of specification is required
        这不是真正的错误，因为它是在 Debug 级别记录的。虽然很混乱，但可以忽略它。
        这是一个已知的问题，将在下一个版本 7.1.0中修复，见https://github.com/jhipster/generator-jhipster/issues/13835
     -->
    <logger name="Validator" level="INFO"/>

    <!-- Spring日志级别控制 -->
    <logger name="org.springframework" level="${logging.level}"/>

    <!-- start日志级别 -->
    <logger name="com.cmmplb" level="${logging.level}"/>

    <!-- 系统日志级别控制 -->
    <logger name="root" level="${logging.level}" additivity="false">
        <!-- 当additivity设为true时，这个logger标签会继承root，也就不止打印自己的日志，还会打印root的日志，打印两遍。 -->
        <appender-ref ref="info"/>
        <appender-ref ref="debug"/>
        <appender-ref ref="error"/>
        <appender-ref ref="console"/>
    </logger>

    <!-- 用户登录日志 -->
    <logger name="user-login" level="INFO">
        <appender-ref ref="USER_LOGIN"/>
    </logger>

    <!-- 由application.yml中的spring.profiles.active配置 -->
    <!-- 本地环境只打印到控制台 -->
    <springProfile name="local">
        <root level="${logging.level}">
            <appender-ref ref="console"/>
            <appender-ref ref="logstash" />
        </root>
    </springProfile>

    <springProfile name="dev">
        <root level="${logging.level}">
            <appender-ref ref="info"/>
            <appender-ref ref="debug"/>
            <appender-ref ref="error"/>
            <appender-ref ref="console"/>
        </root>
    </springProfile>

    <springProfile name="sit">
        <root level="${logging.level}">
            <appender-ref ref="info"/>
            <appender-ref ref="debug"/>
            <appender-ref ref="error"/>
            <appender-ref ref="console"/>
        </root>
    </springProfile>

    <springProfile name="prod">
        <root level="${logging.level}">
            <appender-ref ref="info"/>
            <appender-ref ref="debug"/>
            <appender-ref ref="error"/>
            <appender-ref ref="console"/>
        </root>
    </springProfile>

</configuration>
