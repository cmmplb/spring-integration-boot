spring:
  rabbitmq:
    # 集群配置, 以逗号分隔的客户端应连接的地址列表. 设置后, 主机和端口将被忽略. 
    # addresses: @rabbitmq.address@
    host: 127.0.0.1
    port: 5672
    username: root
    password: cmmplb
    #相当于db配置=如果不存在的话需要去admin端添加
    virtual-host: /cmmplb
    #开启消息二次确认,生产者到broker的交换机
    publisher-confirm-type: correlated
    #开启消息二次确认, 交换机到队列的可靠性投递
    publisher-returns: true
    template:
      #为true,则交换机处理消息到路由失败, 则会返回给生产者
      mandatory: true
    listener:
      simple:
        #消费端
        concurrency: 5
        #最大消费端数
        max-concurrency: 10
        #自动签收auto 手动 manual
        acknowledge-mode: manual
        #限流（海量数据, 同时只能过来一条）
        prefetch: 1
      direct:
        #消息手工确认ACK, 自动签收aut o (NONE,AUTO,MANUAL)
        acknowledge-mode: manual

rabbitmq:
  enabled: true
  # 队列配置
  queues:
    # ============================简单队列模式==============================
    # ---------------------简单队列-一个生产者对应一个消费者------------------
    - # 队列名称,代表一个bean名称, 不能重复
      name: simple_queue
      # 服务器重新启动后队列是否继续存在,默认true
      durable: true
      # 是否为排他队列,默认false,特点:
      # 1.只对首次声明它的连接（Connection）可见
      # 2.会在其连接断开的时候自动删除. 
      exclusive: false
      # 如果服务器不使用队列时是否删除,默认false
      auto-delete: false
      # 队列参数
      # arguments:

    # ==============================Work模式==============================
    # ---------------------Work模式-一个生产者对应多个消费者-------------------
    - name: work_queue
    # ==============================订阅模型-Fanout(广播模式)===============
    # ---------------------订阅模型-Fanout-一条消息被多个消费者消费------------
    - name: one_fanout_queue
    - name: two_fanout_queue
    # ==============================订阅模型-Direct(路由模式)===============
    # ---------------------订阅模型-Direct-根据Routing Key接收到消息---------
    - name: one_direct_queue
    - name: two_direct_queue
    # ==============================订阅模型-Direct(路由模式)===============
    # ----------------------订阅模型-Direct-根据Routing Key接收到消息--------
    - name: one_direct_queue
    - name: two_direct_queue
    # ==============================订阅模型-Topic (主题模式)===============
    # ---------------------订阅模型-Topic-根据RoutingKey路由消息-同时匹配通配符-
    - name: one_topic_queue
    - name: two_topic_queue
    # ==============================死信队列模式===========================
    # --------死信队列-将消息拒绝消费消息(丢失消息)给死信队列或者发送消息到一个没有---
    # --------消费者的普通队列中,过期时间达到后死信队列会接收到消息----------------
    # 声明死信队列
    - name: dead_queue
    # 普通队列
    - name: common_queue
      arguments:
        # 消息过期后, 进入到死信交换机
        x-dead-letter-exchange: dead.exchange
        # 消息过期后, 进入到死信交换机的路由key
        x-dead-letter-routing-key: dead.#
        # 过期时间, 单位毫秒
        x-message-ttl: 30000

  # 交换机配置
  exchanges:
    # ==============================订阅模型-Fanout(广播模式)===============
    # ---------------------订阅模型-Fanout-交换机---------------------
    - # 交换机名称,代表一个bean名称, 不能重复
      name: fanout.exchange
      type: fanout
      # 服务器重新启动后交换机是否继续存在,默认true
      durable: true
      # 如果服务器不使用交换机时是否删除,默认false
      auto-delete: false
      # # 交换机参数
      # arguments:
      # ==============================订阅模型-Topic (主题模式)===============
      # ---------------------订阅模型-Fanout-交换机---------------------
    - name: topic.exchange
      type: topic
    # ==============================订阅模型-Direct(路由模式)=================
    - name: direct.exchange
      type: direct
    # ==============================死信队列模式=============================
    # 声明一个普通Topic交换机
    - name: common.exchange
      type: topic
    # 声明一个死信Topic交换机
    - name: dead.exchange
      type: topic
  # 队列交换机绑定配置
  bindings:
    # ======================订阅模型-Fanout(广播模式)交换机绑定队列==============
    - # 队列交换机绑定bean名称, 默认为队列名+'-'+交换机名
      name: oneFanoutQueue
      # 绑定的队列名称
      queue-name: one_fanout_queue
      # 绑定的交换机名称
      exchange-name: fanout.exchange
      # 交换机路由key,#表示0个或若干个关键字, *表示一个关键字
      routing-key:
      # 参数
      # arguments:
    - name: bindingFanoutTwo
      queue-name: two_fanout_queue
      exchange-name: fanout.exchange
    # ======================订阅模型-Direct(路由模式)交换机绑定队列==============
    - name: bindingDirectOne
      queue-name: one_direct_queue
      exchange-name: direct.exchange
      routing-key: direct.routingKey.one
    - name: bindingDirectTwo
      queue-name: two_direct_queue
      exchange-name: direct.exchange
      routing-key: direct.routingKey.two
    - name: bindingDirectThree
      queue-name: two_direct_queue
      exchange-name: direct.exchange
      routing-key: direct.routingKey.three
    # ======================订阅模型-Topic (主题模式)交换机绑定队列==============
    - name: bindingTopicOne
      queue-name: one_topic_queue
      exchange-name: topic.exchange
      routing-key: "*.a.*"
    - name: bindingTopicTwo
      queue-name: two_topic_queue
      exchange-name: topic.exchange
      routing-key: "*.*.b"
    - name: bindingTopicThree
      queue-name: two_topic_queue
      exchange-name: topic.exchange
      routing-key: "c.#"
    # ======================死信队列模式配置交换机绑定队列==============
    # 绑定普通交换机和普通队列
    - name: bindingCommon
      queue-name: common_queue
      exchange-name: common.exchange
      routing-key: "common.#"
    - name: bindingDead
      queue-name: dead_queue
      exchange-name: dead.exchange
      routing-key: "dead.#"