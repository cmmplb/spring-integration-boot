<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cmmplb.mybatis.dao.UserMapper">
    <cache/>

    <sql id="base_column">
        <!-- @sql select -->
        u.`id`,
        u.`name`,
        u.`sex`,
        u.`mobile`,
        u.`status`,
        u.`create_time`,
        u.`update_time`,
        u.`version`,
        u.`deleted`
        <!-- @sql from `user` u -->
    </sql>

    <sql id="base_select">
        select
        <include refid="base_column"/>
        from `user` u
    </sql>

    <select id="selectList" resultType="com.cmmplb.mybatis.entity.User">
        <include refid="base_select"/>
    </select>

    <insert id="insert" keyColumn="id" keyProperty="id" useGeneratedKeys="true">
        insert into `user` (`id`, `tenant_id`, `name`, `sex`, `mobile`, `status`, `create_time`, `update_time`,
                            `deleted`)
        values (#{id}, #{tenantId}, #{name}, #{sex}, #{mobile}, 1, current_date(), current_date(), 0)
    </insert>

    <delete id="deleteById">
        delete
        from `user`
        where `id` = #{id}
    </delete>

    <update id="updateById">
        update `user`
        <set>
            `update_time` = now(),
            <if test="tenantId != null">
                `tenant_id` = #{tenantId},
            </if>
            <if test="name != null and name != ''">
                `name` = #{name},
            </if>
            <if test="sex != null">
                `sex` = #{sex},
            </if>
            <if test="mobile != null and mobile != ''">
                `mobile` = #{mobile},
            </if>
            <if test="version != null">
                `version` = #{version},
            </if>
            <if test="deleted != null">
                `deleted` = #{deleted},
            </if>
        </set>
        where `id` = #{id}
    </update>

    <select id="selectById" resultType="com.cmmplb.mybatis.entity.User">
        <include refid="base_select"/>
        where u.`id` = #{id}
    </select>

    <select id="selectByPaged" resultType="com.cmmplb.mybatis.entity.User">
        <include refid="base_select"/>
    </select>

    <select id="selectByPagedTotal" resultType="java.lang.Long">
        select count(1)
        from `user`
    </select>

    <select id="selectByPagedList" resultType="com.cmmplb.mybatis.entity.User">
        <include refid="base_select"/>
        limit #{q.start},#{q.size}
    </select>

    <select id="testCurrentUserId" resultType="com.cmmplb.mybatis.entity.User">
        <include refid="base_select"/>
        where u.id = #{currentUserId}
    </select>

    <resultMap id="info_map" type="com.cmmplb.mybatis.vo.UserInfoVO">
        <result column="id" property="id"/>
        <!-- 一对一子查询 -->
        <association property="userInfo" javaType="com.cmmplb.mybatis.entity.UserInfo" column="{id = id}"
                     select="com.cmmplb.mybatis.dao.UserInfoMapper.selectById"/>
    </resultMap>

    <!-- 如果一条语句每次都需要最新的数据，就意味着每次都需要从数据库中查询数据，可以把这个属性设置为false -->
    <select id="selectUserInfoById" resultMap="info_map" useCache="false">
        <include refid="base_select"/>
        where u.id = #{id}
    </select>

    <resultMap id="sub_query_map" type="com.cmmplb.mybatis.vo.UserInfoVO" extends="info_map">
        <!-- 一对多子查询 -->
        <collection property="tagList" ofType="com.cmmplb.mybatis.entity.Tag" column="{userId = id}"
                    select="com.cmmplb.mybatis.dao.TagMapper.selectByUserId"/>
    </resultMap>

    <select id="selectTestOneMany2SubQuery" resultMap="sub_query_map">
        <include refid="base_select"/>
        where u.id = #{id}
    </select>

    <resultMap id="field_mapping_map" type="com.cmmplb.mybatis.vo.UserInfoVO" extends="info_map">
        <!-- 字段映射 -->
        <collection property="tagList" ofType="com.cmmplb.mybatis.entity.Tag">
            <id column="tag_id" property="id"/>
            <result column="tag_name" property="name"/>
            <result column="tag_create_by" property="createBy"/>
            <result column="tag_create_time" property="createTime"/>
            <result column="tag_update_by" property="updateBy"/>
            <result column="tag_update_time" property="updateTime"/>
            <result column="tag_deleted" property="deleted"/>
        </collection>
    </resultMap>

    <select id="selectTestOneMany2FieldMapping" resultMap="field_mapping_map">
        select
        <include refid="base_column"/>
        ,t.`id`          `tag_id`
        ,t.`name`        `tag_name`
        ,t.`create_by`   `tag_create_by`
        ,t.`create_time` `tag_create_time`
        ,t.`update_by`   `tag_update_by`
        ,t.`update_time` `tag_update_time`
        ,t.`deleted`     `tag_deleted`
        from `user` u
        left join `user_tag` ut on u.`id` = ut.`user_id`
        left join `tag` t on t.`id` = ut.`tag_id` and t.`deleted` = 0
        where u.`id` = #{id}
    </select>
</mapper>